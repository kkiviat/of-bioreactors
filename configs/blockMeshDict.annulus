/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  10
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

// height 2;
// radius 1;
// shaft_bottom 0.2;
// shaft_radius 0.1;
// cell_size 0.1;
// Nx #calc "std::round($height / $cell_size)";
// Nh 20;
// Nr 20;
// Na 6;

Na #calc "std::round($Na / 2) * 2"; // must be even

// shaft_bottom #calc "$shaft_bottom / $height";
// shaft_radius #calc "$shaft_radius / $radius";

Nh_lower #calc "std::round($Nh * $shaft_bottom)";
Nh_upper #calc "$Nh - $Nh_lower";

NRinner #calc "std::round($Nr * $shaft_radius)";
NRouter #calc "$Nr - $NRinner";

cyl_NRinner #calc "std::round($Na / 2)";
// cyl_NRouter 3;
// cyl_NRinner #calc "std::round($Nr_inner * 2 / 3)";
cyl_NRouter #calc "std::round($cyl_NRinner / 3)";

convertToMeters 1;

// Nx   10;
// cyl_Nx #calc "std::round(;
// cyl_NRinner #calc "std::round($Na / 2)";
// cyl_NRouter #calc "std::round($cyl_NRinner / 3)";

// shaft_radius 0.1;
shaft_radius_interp #calc "$shaft_radius / std::sqrt(2)";
interp #calc "1 / std::sqrt(2)";
// shaft_bottom 0.2;
v1 #calc "0.8 * $shaft_radius";
v2 #calc "0.610535 * $shaft_radius";
v3 #calc "0.610532 * $shaft_radius";
v4 #calc "0.707107 * $shaft_radius";

vertices
(
    // upper annulus
    ($shaft_bottom $shaft_radius 0)
    ($shaft_bottom 1 0)
    ($shaft_bottom 0 1)
    ($shaft_bottom 0 $shaft_radius)
    (1 $shaft_radius 0)
    (1 1 0)
    (1 0 1)
    (1 0 $shaft_radius) // 7

    // inner cylinder
    (0 0 0) // 8
    (0 0 $v1) // 9
    (0 0 $shaft_radius) // 10
    (0 $v2 $v3) // 11
    (0 $v1 0) // 12
    (0 $shaft_radius 0) // 13
    (0 $v4 $v4) // 14

    ($shaft_bottom 0 0) // 15
    ($shaft_bottom 0 $v1) // 16
    ($shaft_bottom 0 $shaft_radius) // 17
    ($shaft_bottom $v2 $v3) // 18
    ($shaft_bottom $v1 0) // 19
    ($shaft_bottom $shaft_radius 0) // 20
    ($shaft_bottom $v4 $v4) // 21

    // lower annulus
    (0 $shaft_radius 0) // 22
    (0 1 0) // 23
    (0 0 1) // 24
    (0 0 $shaft_radius) // 25
    ($shaft_bottom $shaft_radius 0) // 26
    ($shaft_bottom 1 0) // 27
    ($shaft_bottom 0 1) // 28
);

edges
(
    arc 1 2 ($shaft_bottom $interp $interp)
    arc 5 6 (1 $interp $interp)
    arc 3 0 ($shaft_bottom $shaft_radius_interp $shaft_radius_interp)
    arc 7 4 (1 $shaft_radius_interp $shaft_radius_interp)

	BSpline 9 11 (
		//(0 0 $v1)
		(0 #calc "1.12269e-01 * $shaft_radius" #calc "7.92025e-01 * $shaft_radius")
		(0 #calc "2.22463e-01 * $shaft_radius" #calc "7.62587e-01 * $shaft_radius")
		(0 #calc "3.26692e-01 * $shaft_radius" #calc "7.24996e-01 * $shaft_radius")
		(0 #calc "4.21177e-01 * $shaft_radius" #calc "6.86516e-01 * $shaft_radius")
		(0 #calc "5.02076e-01 * $shaft_radius" #calc "6.52300e-01 * $shaft_radius")
		(0 #calc "5.66526e-01 * $shaft_radius" #calc "6.25913e-01 * $shaft_radius")
		(0 #calc "6.10535e-01 * $shaft_radius" #calc "6.10532e-01 * $shaft_radius")
	)

	BSpline 11 12 (
		(0 #calc "6.10532e-01 * $shaft_radius" #calc "6.10535e-01 * $shaft_radius")
		(0 #calc "6.25913e-01 * $shaft_radius" #calc "5.66526e-01 * $shaft_radius")
		(0 #calc "6.52300e-01 * $shaft_radius" #calc "5.02076e-01 * $shaft_radius")
		(0 #calc "6.86516e-01 * $shaft_radius" #calc "4.21177e-01 * $shaft_radius")
		(0 #calc "7.24996e-01 * $shaft_radius" #calc "3.26692e-01 * $shaft_radius")
		(0 #calc "7.62587e-01 * $shaft_radius" #calc "2.22463e-01 * $shaft_radius")
		(0 #calc "7.92025e-01 * $shaft_radius" #calc "1.12269e-01 * $shaft_radius")
		//(0 $v1 0)
	)
	BSpline 16 18 (
		//(1 0 $v1)
		($shaft_bottom #calc "1.12269e-01 * $shaft_radius" #calc "7.92025e-01 * $shaft_radius")
		($shaft_bottom #calc "2.22463e-01 * $shaft_radius" #calc "7.62587e-01 * $shaft_radius")
		($shaft_bottom #calc "3.26692e-01 * $shaft_radius" #calc "7.24996e-01 * $shaft_radius")
		($shaft_bottom #calc "4.21177e-01 * $shaft_radius" #calc "6.86516e-01 * $shaft_radius")
		($shaft_bottom #calc "5.02076e-01 * $shaft_radius" #calc "6.52300e-01 * $shaft_radius")
		($shaft_bottom #calc "5.66526e-01 * $shaft_radius" #calc "6.25913e-01 * $shaft_radius")
		($shaft_bottom #calc "6.10535e-01 * $shaft_radius" #calc "6.10532e-01 * $shaft_radius")
	)

	BSpline 18 19 (
		($shaft_bottom #calc "6.10532e-01 * $shaft_radius" #calc "6.10535e-01 * $shaft_radius")
		($shaft_bottom #calc "6.25913e-01 * $shaft_radius" #calc "5.66526e-01 * $shaft_radius")
		($shaft_bottom #calc "6.52300e-01 * $shaft_radius" #calc "5.02076e-01 * $shaft_radius")
		($shaft_bottom #calc "6.86516e-01 * $shaft_radius" #calc "4.21177e-01 * $shaft_radius")
		($shaft_bottom #calc "7.24996e-01 * $shaft_radius" #calc "3.26692e-01 * $shaft_radius")
		($shaft_bottom #calc "7.62587e-01 * $shaft_radius" #calc "2.22463e-01 * $shaft_radius")
		($shaft_bottom #calc "7.92025e-01 * $shaft_radius" #calc "1.12269e-01 * $shaft_radius")
		//(1 $v1 0)
	)

	arc 10 14 (0 #calc "0.38268343236508978 * $shaft_radius" #calc "0.92387953251128674 * $shaft_radius")
	arc 14 13 (0 #calc "0.92387953251128674 * $shaft_radius" #calc "0.38268343236508978 * $shaft_radius")

	arc 17 21 ($shaft_bottom #calc "0.38268343236508978 * $shaft_radius" #calc "0.92387953251128674 * $shaft_radius")
	arc 21 20 ($shaft_bottom #calc "0.92387953251128674 * $shaft_radius" #calc "0.38268343236508978 * $shaft_radius")

    // lower annulus
    arc 23 24 (0 $interp $interp)
    arc 27 28 ($shaft_bottom $interp $interp)
    arc 25 22 (0 $shaft_radius_interp $shaft_radius_interp)
    arc 17 26 ($shaft_bottom $shaft_radius_interp $shaft_radius_interp)
);

blocks
(
    hex (0 1 2 3 4 5 6 7) ($Nr $Na $Nh_upper) simpleGrading (1 1 1)

    hex (8 15 19 12 9 16 18 11) ($Nh_lower $cyl_NRinner $cyl_NRinner) simpleGrading (1 1 1)
    hex (12 19 20 13 11 18 21 14) ($Nh_lower $cyl_NRouter $cyl_NRinner) simpleGrading (1 1 1)
    hex (11 18 21 14 9 16 17 10) ($Nh_lower $cyl_NRouter $cyl_NRinner) simpleGrading (1 1 1)

    hex (22 23 24 25 26 27 28 17) ($Nr $Na $Nh_lower) simpleGrading (1 1 1)
);

defaultPatch
{
    type wall;
}

boundary
(
    outlet
    {
        type patch;
        faces
        (
            (4 5 6 7)
        );
    }
    tankwall
    {
        type wall;
        faces
        (
            (1 2 6 5)
            (23 24 28 27)
	    (10 17 16 9)
	    (25 24 23 22)
	    (8 9 11 12)
	    // (22 12 11 14)
	    // (14 11 9 25)
        );
    }
    // symmetryVer
    // {
    //     type symmetryPlane;
    //     faces
    //     (
    //         (2 9 8 1)
    //         (1 8 7 0)
    //     );
    // }
    symmetryHor
    {
        type symmetryPlane;
        faces
        (
            (19 12 8 15)
            // (20 13 12 18)
	    // (8 15 16 9)
	    (0 1 5 4)
	    (22 23 27 26)
        );
    }
    symmetryHor2
    {
        type symmetryPlane;
        faces
        (
	    (9 16 15 8)
        );
    }
);
